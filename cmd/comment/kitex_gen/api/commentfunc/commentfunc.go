// Code generated by Kitex v0.4.4. DO NOT EDIT.

package commentfunc

import (
	"context"
	api "douSheng/cmd/comment/kitex_gen/api"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentFuncServiceInfo
}

var commentFuncServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "commentFunc"
	handlerType := (*api.CommentFunc)(nil)
	methods := map[string]kitex.MethodInfo{
		"CommentList":         kitex.NewMethodInfo(commentListHandler, newCommentFuncCommentListArgs, newCommentFuncCommentListResult, false),
		"AddCommentAction":    kitex.NewMethodInfo(addCommentActionHandler, newCommentFuncAddCommentActionArgs, newCommentFuncAddCommentActionResult, false),
		"DeleteCommentAction": kitex.NewMethodInfo(deleteCommentActionHandler, newCommentFuncDeleteCommentActionArgs, newCommentFuncDeleteCommentActionResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CommentFuncCommentListArgs)
	realResult := result.(*api.CommentFuncCommentListResult)
	success, err := handler.(api.CommentFunc).CommentList(ctx, realArg.VideoId, realArg.Token)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentFuncCommentListArgs() interface{} {
	return api.NewCommentFuncCommentListArgs()
}

func newCommentFuncCommentListResult() interface{} {
	return api.NewCommentFuncCommentListResult()
}

func addCommentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CommentFuncAddCommentActionArgs)
	realResult := result.(*api.CommentFuncAddCommentActionResult)
	success, err := handler.(api.CommentFunc).AddCommentAction(ctx, realArg.Token, realArg.ActionType, realArg.Text, realArg.VideoId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentFuncAddCommentActionArgs() interface{} {
	return api.NewCommentFuncAddCommentActionArgs()
}

func newCommentFuncAddCommentActionResult() interface{} {
	return api.NewCommentFuncAddCommentActionResult()
}

func deleteCommentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.CommentFuncDeleteCommentActionArgs)
	realResult := result.(*api.CommentFuncDeleteCommentActionResult)
	success, err := handler.(api.CommentFunc).DeleteCommentAction(ctx, realArg.Token, realArg.ActionType, realArg.CommentId, realArg.VideoId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentFuncDeleteCommentActionArgs() interface{} {
	return api.NewCommentFuncDeleteCommentActionArgs()
}

func newCommentFuncDeleteCommentActionResult() interface{} {
	return api.NewCommentFuncDeleteCommentActionResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CommentList(ctx context.Context, videoId int64, token string) (r *api.CommentResponse, err error) {
	var _args api.CommentFuncCommentListArgs
	_args.VideoId = videoId
	_args.Token = token
	var _result api.CommentFuncCommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddCommentAction(ctx context.Context, token string, actionType int32, text string, videoId int64) (r *api.CommentResponse, err error) {
	var _args api.CommentFuncAddCommentActionArgs
	_args.Token = token
	_args.ActionType = actionType
	_args.Text = text
	_args.VideoId = videoId
	var _result api.CommentFuncAddCommentActionResult
	if err = p.c.Call(ctx, "AddCommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCommentAction(ctx context.Context, token string, actionType int32, commentId int64, videoId int64) (r *api.CommentResponse, err error) {
	var _args api.CommentFuncDeleteCommentActionArgs
	_args.Token = token
	_args.ActionType = actionType
	_args.CommentId = commentId
	_args.VideoId = videoId
	var _result api.CommentFuncDeleteCommentActionResult
	if err = p.c.Call(ctx, "DeleteCommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
