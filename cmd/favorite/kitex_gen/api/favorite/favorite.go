// Code generated by Kitex v0.4.4. DO NOT EDIT.

package favorite

import (
	"context"
	api "douSheng/cmd/favorite/kitex_gen/api"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return favoriteServiceInfo
}

var favoriteServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "favorite"
	handlerType := (*api.Favorite)(nil)
	methods := map[string]kitex.MethodInfo{
		"FavoriteAction": kitex.NewMethodInfo(favoriteActionHandler, newFavoriteFavoriteActionArgs, newFavoriteFavoriteActionResult, false),
		"FavoriteList":   kitex.NewMethodInfo(favoriteListHandler, newFavoriteFavoriteListArgs, newFavoriteFavoriteListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.FavoriteFavoriteActionArgs)
	realResult := result.(*api.FavoriteFavoriteActionResult)
	success, err := handler.(api.Favorite).FavoriteAction(ctx, realArg.Token, realArg.VideoID, realArg.ActionType)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteFavoriteActionArgs() interface{} {
	return api.NewFavoriteFavoriteActionArgs()
}

func newFavoriteFavoriteActionResult() interface{} {
	return api.NewFavoriteFavoriteActionResult()
}

func favoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.FavoriteFavoriteListArgs)
	realResult := result.(*api.FavoriteFavoriteListResult)
	success, err := handler.(api.Favorite).FavoriteList(ctx, realArg.Token)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteFavoriteListArgs() interface{} {
	return api.NewFavoriteFavoriteListArgs()
}

func newFavoriteFavoriteListResult() interface{} {
	return api.NewFavoriteFavoriteListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FavoriteAction(ctx context.Context, token string, videoID int64, actionType int32) (r *api.FavoriteResponse, err error) {
	var _args api.FavoriteFavoriteActionArgs
	_args.Token = token
	_args.VideoID = videoID
	_args.ActionType = actionType
	var _result api.FavoriteFavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteList(ctx context.Context, token string) (r *api.FavoriteResponse, err error) {
	var _args api.FavoriteFavoriteListArgs
	_args.Token = token
	var _result api.FavoriteFavoriteListResult
	if err = p.c.Call(ctx, "FavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
