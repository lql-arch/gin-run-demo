// Code generated by Kitex v0.4.4. DO NOT EDIT.

package feed

import (
	"context"
	api "douSheng/cmd/feed/kitex_gen/api"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return feedServiceInfo
}

var feedServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Feed"
	handlerType := (*api.Feed)(nil)
	methods := map[string]kitex.MethodInfo{
		"ReadVideos": kitex.NewMethodInfo(readVideosHandler, newFeedReadVideosArgs, newFeedReadVideosResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func readVideosHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.FeedReadVideosArgs)
	realResult := result.(*api.FeedReadVideosResult)
	success, err := handler.(api.Feed).ReadVideos(ctx, realArg.LatestTime, realArg.Token)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFeedReadVideosArgs() interface{} {
	return api.NewFeedReadVideosArgs()
}

func newFeedReadVideosResult() interface{} {
	return api.NewFeedReadVideosResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ReadVideos(ctx context.Context, latestTime int64, token string) (r *api.FeedList, err error) {
	var _args api.FeedReadVideosArgs
	_args.LatestTime = latestTime
	_args.Token = token
	var _result api.FeedReadVideosResult
	if err = p.c.Call(ctx, "ReadVideos", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
