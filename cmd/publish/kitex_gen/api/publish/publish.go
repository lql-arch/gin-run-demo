// Code generated by Kitex v0.4.4. DO NOT EDIT.

package publish

import (
	"context"
	api "douSheng/cmd/publish/kitex_gen/api"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return publishServiceInfo
}

var publishServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "publish"
	handlerType := (*api.Publish)(nil)
	methods := map[string]kitex.MethodInfo{
		"Publish":     kitex.NewMethodInfo(publishHandler, newPublishPublishArgs, newPublishPublishResult, false),
		"PublishList": kitex.NewMethodInfo(publishListHandler, newPublishPublishListArgs, newPublishPublishListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func publishHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.PublishPublishArgs)
	realResult := result.(*api.PublishPublishResult)
	success, err := handler.(api.Publish).Publish(ctx, realArg.Token, realArg.Video)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishPublishArgs() interface{} {
	return api.NewPublishPublishArgs()
}

func newPublishPublishResult() interface{} {
	return api.NewPublishPublishResult()
}

func publishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.PublishPublishListArgs)
	realResult := result.(*api.PublishPublishListResult)
	success, err := handler.(api.Publish).PublishList(ctx, realArg.Token)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newPublishPublishListArgs() interface{} {
	return api.NewPublishPublishListArgs()
}

func newPublishPublishListResult() interface{} {
	return api.NewPublishPublishListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Publish(ctx context.Context, token string, video *api.VideoData) (r *api.PublishResponse, err error) {
	var _args api.PublishPublishArgs
	_args.Token = token
	_args.Video = video
	var _result api.PublishPublishResult
	if err = p.c.Call(ctx, "Publish", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishList(ctx context.Context, token string) (r *api.PublishResponse, err error) {
	var _args api.PublishPublishListArgs
	_args.Token = token
	var _result api.PublishPublishListResult
	if err = p.c.Call(ctx, "PublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
