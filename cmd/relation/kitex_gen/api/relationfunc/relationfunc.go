// Code generated by Kitex v0.4.4. DO NOT EDIT.

package relationfunc

import (
	"context"
	api "douSheng/cmd/relation/kitex_gen/api"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationFuncServiceInfo
}

var relationFuncServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "relationFunc"
	handlerType := (*api.RelationFunc)(nil)
	methods := map[string]kitex.MethodInfo{
		"RelationAction": kitex.NewMethodInfo(relationActionHandler, newRelationFuncRelationActionArgs, newRelationFuncRelationActionResult, false),
		"FollowList":     kitex.NewMethodInfo(followListHandler, newRelationFuncFollowListArgs, newRelationFuncFollowListResult, false),
		"FollowerList":   kitex.NewMethodInfo(followerListHandler, newRelationFuncFollowerListArgs, newRelationFuncFollowerListResult, false),
		"FriendList":     kitex.NewMethodInfo(friendListHandler, newRelationFuncFriendListArgs, newRelationFuncFriendListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.RelationFuncRelationActionArgs)
	realResult := result.(*api.RelationFuncRelationActionResult)
	success, err := handler.(api.RelationFunc).RelationAction(ctx, realArg.Token, realArg.ToUserId, realArg.State)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationFuncRelationActionArgs() interface{} {
	return api.NewRelationFuncRelationActionArgs()
}

func newRelationFuncRelationActionResult() interface{} {
	return api.NewRelationFuncRelationActionResult()
}

func followListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.RelationFuncFollowListArgs)
	realResult := result.(*api.RelationFuncFollowListResult)
	success, err := handler.(api.RelationFunc).FollowList(ctx, realArg.UserId, realArg.Token)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationFuncFollowListArgs() interface{} {
	return api.NewRelationFuncFollowListArgs()
}

func newRelationFuncFollowListResult() interface{} {
	return api.NewRelationFuncFollowListResult()
}

func followerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.RelationFuncFollowerListArgs)
	realResult := result.(*api.RelationFuncFollowerListResult)
	success, err := handler.(api.RelationFunc).FollowerList(ctx, realArg.UserId, realArg.Token)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationFuncFollowerListArgs() interface{} {
	return api.NewRelationFuncFollowerListArgs()
}

func newRelationFuncFollowerListResult() interface{} {
	return api.NewRelationFuncFollowerListResult()
}

func friendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.RelationFuncFriendListArgs)
	realResult := result.(*api.RelationFuncFriendListResult)
	success, err := handler.(api.RelationFunc).FriendList(ctx, realArg.UserId, realArg.Token)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationFuncFriendListArgs() interface{} {
	return api.NewRelationFuncFriendListArgs()
}

func newRelationFuncFriendListResult() interface{} {
	return api.NewRelationFuncFriendListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RelationAction(ctx context.Context, token string, toUserId int64, state int32) (r *api.RelationResponse, err error) {
	var _args api.RelationFuncRelationActionArgs
	_args.Token = token
	_args.ToUserId = toUserId
	_args.State = state
	var _result api.RelationFuncRelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowList(ctx context.Context, userId int64, token string) (r *api.RelationResponse, err error) {
	var _args api.RelationFuncFollowListArgs
	_args.UserId = userId
	_args.Token = token
	var _result api.RelationFuncFollowListResult
	if err = p.c.Call(ctx, "FollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerList(ctx context.Context, userId int64, token string) (r *api.RelationResponse, err error) {
	var _args api.RelationFuncFollowerListArgs
	_args.UserId = userId
	_args.Token = token
	var _result api.RelationFuncFollowerListResult
	if err = p.c.Call(ctx, "FollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FriendList(ctx context.Context, userId int64, token string) (r *api.RelationResponse, err error) {
	var _args api.RelationFuncFriendListArgs
	_args.UserId = userId
	_args.Token = token
	var _result api.RelationFuncFriendListResult
	if err = p.c.Call(ctx, "FriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
