// Code generated by Kitex v0.4.4. DO NOT EDIT.

package echo

import (
	"context"
	api "douSheng/kitex/kitex_gen/api"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return echoServiceInfo
}

var echoServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Echo"
	handlerType := (*api.Echo)(nil)
	methods := map[string]kitex.MethodInfo{
		"Video":             kitex.NewMethodInfo(videoHandler, newEchoVideoArgs, newEchoVideoResult, false),
		"User":              kitex.NewMethodInfo(userHandler, newEchoUserArgs, newEchoUserResult, false),
		"FriendUser":        kitex.NewMethodInfo(friendUserHandler, newEchoFriendUserArgs, newEchoFriendUserResult, false),
		"Comment":           kitex.NewMethodInfo(commentHandler, newEchoCommentArgs, newEchoCommentResult, false),
		"UserVideoFavorite": kitex.NewMethodInfo(userVideoFavoriteHandler, newEchoUserVideoFavoriteArgs, newEchoUserVideoFavoriteResult, false),
		"Relation":          kitex.NewMethodInfo(relationHandler, newEchoRelationArgs, newEchoRelationResult, false),
		"Message":           kitex.NewMethodInfo(messageHandler, newEchoMessageArgs, newEchoMessageResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func videoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.EchoVideoArgs)
	realResult := result.(*api.EchoVideoResult)
	success, err := handler.(api.Echo).Video(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEchoVideoArgs() interface{} {
	return api.NewEchoVideoArgs()
}

func newEchoVideoResult() interface{} {
	return api.NewEchoVideoResult()
}

func userHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.EchoUserArgs)
	realResult := result.(*api.EchoUserResult)
	success, err := handler.(api.Echo).User(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEchoUserArgs() interface{} {
	return api.NewEchoUserArgs()
}

func newEchoUserResult() interface{} {
	return api.NewEchoUserResult()
}

func friendUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.EchoFriendUserArgs)
	realResult := result.(*api.EchoFriendUserResult)
	success, err := handler.(api.Echo).FriendUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEchoFriendUserArgs() interface{} {
	return api.NewEchoFriendUserArgs()
}

func newEchoFriendUserResult() interface{} {
	return api.NewEchoFriendUserResult()
}

func commentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.EchoCommentArgs)
	realResult := result.(*api.EchoCommentResult)
	success, err := handler.(api.Echo).Comment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEchoCommentArgs() interface{} {
	return api.NewEchoCommentArgs()
}

func newEchoCommentResult() interface{} {
	return api.NewEchoCommentResult()
}

func userVideoFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.EchoUserVideoFavoriteArgs)
	realResult := result.(*api.EchoUserVideoFavoriteResult)
	success, err := handler.(api.Echo).UserVideoFavorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEchoUserVideoFavoriteArgs() interface{} {
	return api.NewEchoUserVideoFavoriteArgs()
}

func newEchoUserVideoFavoriteResult() interface{} {
	return api.NewEchoUserVideoFavoriteResult()
}

func relationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.EchoRelationArgs)
	realResult := result.(*api.EchoRelationResult)
	success, err := handler.(api.Echo).Relation(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEchoRelationArgs() interface{} {
	return api.NewEchoRelationArgs()
}

func newEchoRelationResult() interface{} {
	return api.NewEchoRelationResult()
}

func messageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.EchoMessageArgs)
	realResult := result.(*api.EchoMessageResult)
	success, err := handler.(api.Echo).Message(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEchoMessageArgs() interface{} {
	return api.NewEchoMessageArgs()
}

func newEchoMessageResult() interface{} {
	return api.NewEchoMessageResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Video(ctx context.Context, req *api.Video) (r *api.Response, err error) {
	var _args api.EchoVideoArgs
	_args.Req = req
	var _result api.EchoVideoResult
	if err = p.c.Call(ctx, "Video", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) User(ctx context.Context, req *api.User) (r *api.Response, err error) {
	var _args api.EchoUserArgs
	_args.Req = req
	var _result api.EchoUserResult
	if err = p.c.Call(ctx, "User", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FriendUser(ctx context.Context, req *api.FriendUser) (r *api.Response, err error) {
	var _args api.EchoFriendUserArgs
	_args.Req = req
	var _result api.EchoFriendUserResult
	if err = p.c.Call(ctx, "FriendUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Comment(ctx context.Context, req *api.Comment) (r *api.Response, err error) {
	var _args api.EchoCommentArgs
	_args.Req = req
	var _result api.EchoCommentResult
	if err = p.c.Call(ctx, "Comment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserVideoFavorite(ctx context.Context, req *api.UserVideoFavorite) (r *api.Response, err error) {
	var _args api.EchoUserVideoFavoriteArgs
	_args.Req = req
	var _result api.EchoUserVideoFavoriteResult
	if err = p.c.Call(ctx, "UserVideoFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Relation(ctx context.Context, req *api.Relation) (r *api.Response, err error) {
	var _args api.EchoRelationArgs
	_args.Req = req
	var _result api.EchoRelationResult
	if err = p.c.Call(ctx, "Relation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Message(ctx context.Context, req *api.Message) (r *api.Relation, err error) {
	var _args api.EchoMessageArgs
	_args.Req = req
	var _result api.EchoMessageResult
	if err = p.c.Call(ctx, "Message", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
