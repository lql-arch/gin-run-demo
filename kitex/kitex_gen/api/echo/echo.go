// Code generated by Kitex v0.4.4. DO NOT EDIT.

package echo

import (
	"context"
	api "douSheng/kitex/kitex_gen/api"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return echoServiceInfo
}

var echoServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Echo"
	handlerType := (*api.Echo)(nil)
	methods := map[string]kitex.MethodInfo{
		"FindComments":  kitex.NewMethodInfo(findCommentsHandler, newEchoFindCommentsArgs, newEchoFindCommentsResult, false),
		"ReviseComment": kitex.NewMethodInfo(reviseCommentHandler, newEchoReviseCommentArgs, newEchoReviseCommentResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "api",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func findCommentsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.EchoFindCommentsArgs)
	realResult := result.(*api.EchoFindCommentsResult)
	success, err := handler.(api.Echo).FindComments(ctx, realArg.VideoId, realArg.Token)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEchoFindCommentsArgs() interface{} {
	return api.NewEchoFindCommentsArgs()
}

func newEchoFindCommentsResult() interface{} {
	return api.NewEchoFindCommentsResult()
}

func reviseCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*api.EchoReviseCommentArgs)
	realResult := result.(*api.EchoReviseCommentResult)
	success, err := handler.(api.Echo).ReviseComment(ctx, realArg.Comment)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEchoReviseCommentArgs() interface{} {
	return api.NewEchoReviseCommentArgs()
}

func newEchoReviseCommentResult() interface{} {
	return api.NewEchoReviseCommentResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FindComments(ctx context.Context, videoId int32, token string) (r *api.Comment, err error) {
	var _args api.EchoFindCommentsArgs
	_args.VideoId = videoId
	_args.Token = token
	var _result api.EchoFindCommentsResult
	if err = p.c.Call(ctx, "FindComments", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ReviseComment(ctx context.Context, comment *api.Comment) (r *api.Response, err error) {
	var _args api.EchoReviseCommentArgs
	_args.Comment = comment
	var _result api.EchoReviseCommentResult
	if err = p.c.Call(ctx, "ReviseComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
